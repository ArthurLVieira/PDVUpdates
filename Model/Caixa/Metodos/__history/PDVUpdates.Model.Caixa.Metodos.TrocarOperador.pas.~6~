unit PDVUpdates.Model.Caixa.Metodos.TrocarOperador;

interface

uses PDVUpdates.Model.Caixa.Interfaces, PDVUpdates.Model.Usuario.Interfaces;

type

  TModelCaixaMetodosTrocarOperador = class(TInterfacedObject,
    iModelCaixaMetodosTrocarOperador)
  private
    FParent: iModelCaixa;
    FUsuarioAutorizador: iModelUsuario;
    FUsuarioTroca: iModelUsuario;
  public
    constructor Create(Value: iModelCaixa);
    destructor Destroy; override;
    class function New(Value: iModelCaixa): iModelCaixaMetodosTrocarOperador;
    function SetTrocaOperador(Value: iModelUsuario)
      : iModelCaixaMetodosTrocarOperador;
    function SetAutorizadorTroca(Value: iModelUsuario)
      : iModelCaixaMetodosTrocarOperador;
    function &EndTrocarOperador: iModelCaixaMetodos;

  end;

implementation

{ TModelCaixaMetodosTrocarOperador }

constructor TModelCaixaMetodosTrocarOperador.Create(Value: iModelCaixa);
begin
  FParent := Value;
end;

destructor TModelCaixaMetodosTrocarOperador.Destroy;
begin

  inherited;
end;

function TModelCaixaMetodosTrocarOperador.EndTrocarOperador: iModelCaixaMetodos;
begin
  Result := FParent.Metodos;
end;

class function TModelCaixaMetodosTrocarOperador.New(Value: iModelCaixa)
  : iModelCaixaMetodosTrocarOperador;
begin
  Result := Self.Create(Value);
end;

function TModelCaixaMetodosTrocarOperador.SetAutorizadorTroca
  (Value: iModelUsuario): iModelCaixaMetodosTrocarOperador;
begin
  Result := Self;
  FUsuarioTroca := Value;
end;

function TModelCaixaMetodosTrocarOperador.SetTrocaOperador(Value: iModelUsuario)
  : iModelCaixaMetodosTrocarOperador;
begin

end;

end.
