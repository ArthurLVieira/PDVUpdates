unit PDVUpdates.Model.Caixa.Metodos.Factory;

interface

uses PDVUpdates.Model.Caixa.Metodos.Interfaces,
  PDVUpdates.Model.Caixa.Interfaces;

type

  TModelCaixaMetodosFactory = class(TInterfacedObject,
    iModelCaixaMetodosFactory)
  private
  public
    constructor Create;
    destructor Destroy; override;
    class function New: iModelCaixaMetodosFactory;
    function Abrir(Value: iModelCaixa): iModelCaixaMetodosAbrir;
    function Fechar(Value: iModelCaixa): iModelCaixaMetodosFechar;
    function Suprimento(Value: iModelCaixa): iModelCaixaMetodosSuprimento;
    function Sangria(Value: iModelCaixa): iModelCaixaMetodosSangria;
    function TrocarOperador(Value: iModelCaixa)
      : iModelCaixaMetodosTrocarOperador;
    function BloquearCaixa(Value: iModelCaixa): iModelCaixaMetodosBloquear;

  end;

implementation

uses
  PDVUpdates.Model.Caixa.Metodos.Abrir,
  PDVUpdates.Model.Caixa.Metodos.Bloquear,
  PDVUpdates.Model.Caixa.Metodos.Fechar,
  PDVUpdates.Model.Caixa.Metodos.Sangria,
  PDVUpdates.Model.Caixa.Metodos.Suprimento,
  PDVUpdates.Model.Caixa.Metodos.TrocarOperador;

{ TModelCaixaMetodosFactory }

function TModelCaixaMetodosFactory.Abrir(Value: iModelCaixa)
  : iModelCaixaMetodosAbrir;
begin
  Result := TModelCaixaMetodosAbrir.New(Value);
end;

function TModelCaixaMetodosFactory.BloquearCaixa(Value: iModelCaixa)
  : iModelCaixaMetodosBloquear;
begin
  Result := TModelCaixaMetodosBloquear.New(Value);
end;

constructor TModelCaixaMetodosFactory.Create;
begin

end;

destructor TModelCaixaMetodosFactory.Destroy;
begin

  inherited;
end;

function TModelCaixaMetodosFactory.Fechar(Value: iModelCaixa)
  : iModelCaixaMetodosFechar;
begin
  Result := TModelCaixaMetodosFechar.New(Value);
end;

class function TModelCaixaMetodosFactory.New: iModelCaixaMetodosFactory;
begin
  Result := Self.Create;
end;

function TModelCaixaMetodosFactory.Sangria(Value: iModelCaixa)
  : iModelCaixaMetodosSangria;
begin
  Result := TModelCaixaMetodosSangria.New(Value);
end;

function TModelCaixaMetodosFactory.Suprimento(Value: iModelCaixa)
  : iModelCaixaMetodosSuprimento;
begin
  Result := TModelCaixaMetodosSuprimento.New(Value);
end;

function TModelCaixaMetodosFactory.TrocarOperador(Value: iModelCaixa)
  : iModelCaixaMetodosTrocarOperador;
begin
  Result := TModelCaixaMetodosTrocarOperador.New(Value);
end;
end;

end.
